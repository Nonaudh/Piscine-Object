@startuml

abstract class LinkablePart {
  void execute(float p_pression) = 0
}

class Wheel {
  void executeRotation(float p_force)
}

class Gear {
  int demultiplier
}

class Singleton<GearLever>

class GearLever {
  array<Gear>
  int level
  void change()
  Gear *activeGear()
}

Singleton <|-- GearLever
GearLever *-- Gear

class Transmission {
vector<Wheel *>
void activate(float p_force)
}

Transmission o-- Wheel

class Crankshaft {
Transmission *
void receiveForce(float p_volume)
}

Crankshaft --> Transmission

class ExplosionChamber {
Crankshaft *
fill(float p_volume)
}

ExplosionChamber --> Crankshaft

class Injector {
ExplosionChamber *
void execute(float p_pression)
}

LinkablePart <|-- Injector
Injector --> ExplosionChamber

class Motor {
  Injector
  ExplosionChamber
  Crankshaft
  void connectToTransmission(Transmission* p_transmission)
}

Motor *-- Injector
Motor *-- ExplosionChamber
Motor *-- Crankshaft
Motor --> Transmission

class Pedal {
  LinkablePart *
  void setTarget(LinkablePart* p_part)
  void use(float p_pression)
}

Pedal --> LinkablePart

class Direction {
  array<Wheel>
  void turn(float p_angle)
}

Direction *-- Wheel

class DAE {
  Direction *
  float force
  void use(float p_angle)
}

DAE --> Direction

class SteerWheel {
  DAE *
  void turn(float p_angle)
}

SteerWheel --> DAE

class Brake {
  Wheel *
  void execute(float p_force)
  void attackWheel(Wheel* p_wheel)
}

Brake --> Wheel

class BrakeController {
  array<Brake>
  void execute(float p_pression)
}

LinkablePart <|-- BrakeController
BrakeController *-- Brake

class Cockpit {
  Pedal
  SteerWheel
  GearLever
  void manageObjects()
}

Cockpit *-- Pedal
Cockpit *-- SteerWheel
Cockpit *-- GearLever

class Electronics {
  DAE
}

Electronics *-- DAE

class Car {
  BrakeController
  Direction
  Transmission
  Motor
  Electronics
  Cockpit
  void vroumVroum()
}

Car *-- BrakeController
Car *-- Direction
Car *-- Transmission
Car *-- Motor
Car *-- Electronics
Car *-- Cockpit

@enduml
